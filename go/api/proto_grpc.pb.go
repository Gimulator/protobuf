// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MessageAPIClient is the client API for MessageAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageAPIClient interface {
	Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Message, error)
	GetAll(ctx context.Context, in *Key, opts ...grpc.CallOption) (MessageAPI_GetAllClient, error)
	Put(ctx context.Context, in *Message, opts ...grpc.CallOption) (*empty.Empty, error)
	Delete(ctx context.Context, in *Key, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteAll(ctx context.Context, in *Key, opts ...grpc.CallOption) (*empty.Empty, error)
	Watch(ctx context.Context, in *Key, opts ...grpc.CallOption) (MessageAPI_WatchClient, error)
}

type messageAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageAPIClient(cc grpc.ClientConnInterface) MessageAPIClient {
	return &messageAPIClient{cc}
}

func (c *messageAPIClient) Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/api.MessageAPI/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageAPIClient) GetAll(ctx context.Context, in *Key, opts ...grpc.CallOption) (MessageAPI_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageAPI_serviceDesc.Streams[0], "/api.MessageAPI/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageAPIGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessageAPI_GetAllClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type messageAPIGetAllClient struct {
	grpc.ClientStream
}

func (x *messageAPIGetAllClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageAPIClient) Put(ctx context.Context, in *Message, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.MessageAPI/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageAPIClient) Delete(ctx context.Context, in *Key, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.MessageAPI/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageAPIClient) DeleteAll(ctx context.Context, in *Key, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.MessageAPI/DeleteAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageAPIClient) Watch(ctx context.Context, in *Key, opts ...grpc.CallOption) (MessageAPI_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageAPI_serviceDesc.Streams[1], "/api.MessageAPI/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageAPIWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessageAPI_WatchClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type messageAPIWatchClient struct {
	grpc.ClientStream
}

func (x *messageAPIWatchClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageAPIServer is the server API for MessageAPI service.
// All implementations must embed UnimplementedMessageAPIServer
// for forward compatibility
type MessageAPIServer interface {
	Get(context.Context, *Key) (*Message, error)
	GetAll(*Key, MessageAPI_GetAllServer) error
	Put(context.Context, *Message) (*empty.Empty, error)
	Delete(context.Context, *Key) (*empty.Empty, error)
	DeleteAll(context.Context, *Key) (*empty.Empty, error)
	Watch(*Key, MessageAPI_WatchServer) error
	mustEmbedUnimplementedMessageAPIServer()
}

// UnimplementedMessageAPIServer must be embedded to have forward compatible implementations.
type UnimplementedMessageAPIServer struct {
}

func (UnimplementedMessageAPIServer) Get(context.Context, *Key) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMessageAPIServer) GetAll(*Key, MessageAPI_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedMessageAPIServer) Put(context.Context, *Message) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedMessageAPIServer) Delete(context.Context, *Key) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMessageAPIServer) DeleteAll(context.Context, *Key) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (UnimplementedMessageAPIServer) Watch(*Key, MessageAPI_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedMessageAPIServer) mustEmbedUnimplementedMessageAPIServer() {}

// UnsafeMessageAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageAPIServer will
// result in compilation errors.
type UnsafeMessageAPIServer interface {
	mustEmbedUnimplementedMessageAPIServer()
}

func RegisterMessageAPIServer(s *grpc.Server, srv MessageAPIServer) {
	s.RegisterService(&_MessageAPI_serviceDesc, srv)
}

func _MessageAPI_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageAPIServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MessageAPI/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageAPIServer).Get(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageAPI_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Key)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageAPIServer).GetAll(m, &messageAPIGetAllServer{stream})
}

type MessageAPI_GetAllServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type messageAPIGetAllServer struct {
	grpc.ServerStream
}

func (x *messageAPIGetAllServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _MessageAPI_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageAPIServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MessageAPI/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageAPIServer).Put(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageAPI_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageAPIServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MessageAPI/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageAPIServer).Delete(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageAPI_DeleteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageAPIServer).DeleteAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MessageAPI/DeleteAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageAPIServer).DeleteAll(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageAPI_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Key)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageAPIServer).Watch(m, &messageAPIWatchServer{stream})
}

type MessageAPI_WatchServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type messageAPIWatchServer struct {
	grpc.ServerStream
}

func (x *messageAPIWatchServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

var _MessageAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.MessageAPI",
	HandlerType: (*MessageAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _MessageAPI_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _MessageAPI_Put_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MessageAPI_Delete_Handler,
		},
		{
			MethodName: "DeleteAll",
			Handler:    _MessageAPI_DeleteAll_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _MessageAPI_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Watch",
			Handler:       _MessageAPI_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto.proto",
}

// DirectorAPIClient is the client API for DirectorAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DirectorAPIClient interface {
	GetActors(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (DirectorAPI_GetActorsClient, error)
	PutResult(ctx context.Context, in *Result, opts ...grpc.CallOption) (*empty.Empty, error)
}

type directorAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewDirectorAPIClient(cc grpc.ClientConnInterface) DirectorAPIClient {
	return &directorAPIClient{cc}
}

func (c *directorAPIClient) GetActors(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (DirectorAPI_GetActorsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DirectorAPI_serviceDesc.Streams[0], "/api.DirectorAPI/GetActors", opts...)
	if err != nil {
		return nil, err
	}
	x := &directorAPIGetActorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DirectorAPI_GetActorsClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type directorAPIGetActorsClient struct {
	grpc.ClientStream
}

func (x *directorAPIGetActorsClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *directorAPIClient) PutResult(ctx context.Context, in *Result, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.DirectorAPI/PutResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirectorAPIServer is the server API for DirectorAPI service.
// All implementations must embed UnimplementedDirectorAPIServer
// for forward compatibility
type DirectorAPIServer interface {
	GetActors(*empty.Empty, DirectorAPI_GetActorsServer) error
	PutResult(context.Context, *Result) (*empty.Empty, error)
	mustEmbedUnimplementedDirectorAPIServer()
}

// UnimplementedDirectorAPIServer must be embedded to have forward compatible implementations.
type UnimplementedDirectorAPIServer struct {
}

func (UnimplementedDirectorAPIServer) GetActors(*empty.Empty, DirectorAPI_GetActorsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetActors not implemented")
}
func (UnimplementedDirectorAPIServer) PutResult(context.Context, *Result) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutResult not implemented")
}
func (UnimplementedDirectorAPIServer) mustEmbedUnimplementedDirectorAPIServer() {}

// UnsafeDirectorAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DirectorAPIServer will
// result in compilation errors.
type UnsafeDirectorAPIServer interface {
	mustEmbedUnimplementedDirectorAPIServer()
}

func RegisterDirectorAPIServer(s *grpc.Server, srv DirectorAPIServer) {
	s.RegisterService(&_DirectorAPI_serviceDesc, srv)
}

func _DirectorAPI_GetActors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DirectorAPIServer).GetActors(m, &directorAPIGetActorsServer{stream})
}

type DirectorAPI_GetActorsServer interface {
	Send(*User) error
	grpc.ServerStream
}

type directorAPIGetActorsServer struct {
	grpc.ServerStream
}

func (x *directorAPIGetActorsServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _DirectorAPI_PutResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Result)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorAPIServer).PutResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DirectorAPI/PutResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorAPIServer).PutResult(ctx, req.(*Result))
	}
	return interceptor(ctx, in, info, handler)
}

var _DirectorAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.DirectorAPI",
	HandlerType: (*DirectorAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutResult",
			Handler:    _DirectorAPI_PutResult_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetActors",
			Handler:       _DirectorAPI_GetActors_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto.proto",
}

// OperatorAPIClient is the client API for OperatorAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OperatorAPIClient interface {
	SetUserStatus(ctx context.Context, in *Report, opts ...grpc.CallOption) (*empty.Empty, error)
}

type operatorAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewOperatorAPIClient(cc grpc.ClientConnInterface) OperatorAPIClient {
	return &operatorAPIClient{cc}
}

func (c *operatorAPIClient) SetUserStatus(ctx context.Context, in *Report, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.OperatorAPI/SetUserStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperatorAPIServer is the server API for OperatorAPI service.
// All implementations must embed UnimplementedOperatorAPIServer
// for forward compatibility
type OperatorAPIServer interface {
	SetUserStatus(context.Context, *Report) (*empty.Empty, error)
	mustEmbedUnimplementedOperatorAPIServer()
}

// UnimplementedOperatorAPIServer must be embedded to have forward compatible implementations.
type UnimplementedOperatorAPIServer struct {
}

func (UnimplementedOperatorAPIServer) SetUserStatus(context.Context, *Report) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserStatus not implemented")
}
func (UnimplementedOperatorAPIServer) mustEmbedUnimplementedOperatorAPIServer() {}

// UnsafeOperatorAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperatorAPIServer will
// result in compilation errors.
type UnsafeOperatorAPIServer interface {
	mustEmbedUnimplementedOperatorAPIServer()
}

func RegisterOperatorAPIServer(s *grpc.Server, srv OperatorAPIServer) {
	s.RegisterService(&_OperatorAPI_serviceDesc, srv)
}

func _OperatorAPI_SetUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Report)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorAPIServer).SetUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.OperatorAPI/SetUserStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorAPIServer).SetUserStatus(ctx, req.(*Report))
	}
	return interceptor(ctx, in, info, handler)
}

var _OperatorAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.OperatorAPI",
	HandlerType: (*OperatorAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetUserStatus",
			Handler:    _OperatorAPI_SetUserStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto.proto",
}

// UserAPIClient is the client API for UserAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAPIClient interface {
	ImReady(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type userAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAPIClient(cc grpc.ClientConnInterface) UserAPIClient {
	return &userAPIClient{cc}
}

func (c *userAPIClient) ImReady(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.UserAPI/ImReady", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.UserAPI/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAPIServer is the server API for UserAPI service.
// All implementations must embed UnimplementedUserAPIServer
// for forward compatibility
type UserAPIServer interface {
	ImReady(context.Context, *empty.Empty) (*empty.Empty, error)
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	mustEmbedUnimplementedUserAPIServer()
}

// UnimplementedUserAPIServer must be embedded to have forward compatible implementations.
type UnimplementedUserAPIServer struct {
}

func (UnimplementedUserAPIServer) ImReady(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImReady not implemented")
}
func (UnimplementedUserAPIServer) Ping(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedUserAPIServer) mustEmbedUnimplementedUserAPIServer() {}

// UnsafeUserAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAPIServer will
// result in compilation errors.
type UnsafeUserAPIServer interface {
	mustEmbedUnimplementedUserAPIServer()
}

func RegisterUserAPIServer(s *grpc.Server, srv UserAPIServer) {
	s.RegisterService(&_UserAPI_serviceDesc, srv)
}

func _UserAPI_ImReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ImReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/ImReady",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ImReady(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.UserAPI",
	HandlerType: (*UserAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImReady",
			Handler:    _UserAPI_ImReady_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _UserAPI_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto.proto",
}
